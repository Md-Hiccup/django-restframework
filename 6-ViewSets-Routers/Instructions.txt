Super user :    
    Username:   admin 
    Email:      admin@admin.com 
    Password:   test@123

A)  Quick Start

1) Install django==1.11 djangorestframework pygments
2) python manage.py runserver

Note: Install httpie:   sudo apt-get install httpie

3) curl -H 'Accept: application/json; indent=4' -u admin:admin@123 http://127.0.0.1:8000/snippets/
4) http -a admin:admin@123 http://127.0.0.1:8000/snippets/

urls:
    http://localhost:8000/snippets/             //  ['GET', 'POST']
    https://localhost:8000/snippets/1/          //  ['GET', 'PUT', 'DELETE']



B)  Request and Response

Format of Response that we get back 
    by using 'Accept'
        http http://127.0.0.1:8000/snippets/ Accept:application/json  # Request JSON
        http http://127.0.0.1:8000/snippets/ Accept:text/html         # Request HTML

    or by using Format suffix
        http http://127.0.0.1:8000/snippets.json  # JSON suffix
        http http://127.0.0.1:8000/snippets.api   # Browsable API suffix

POST Request using Content-Type
    # POST using form data
    http --form POST http://127.0.0.1:8000/snippets/ code="print 123"

    # POST using JSON
    http --json POST http://127.0.0.1:8000/snippets/ code="print 456"


NOTE: If you add a --debug switch to the http requests above, you will be able to see the request type in request headers.



C)  Class Based Views

1) using mixins
    The base class provides the core functionality and mixins classess provides some functions like 
        -   ListModelMixin      =   .list()
        -   CreateModelMixin    =   .create()
        -   RetrieveModelMixin  =   .retrieve()
        -   UpdateModelMixin    =   .update()
        -   DestroyModelMixin   =   .destroy()

2) using Generic class based views
    import the generic from rest_framework
    For Create and listing  =   include base class 'generics.ListCreateAPIView'
    For Retrive,Update and Destroy  =   include base class 'generics.RetrieveUpdateDestroyAPIView'



D)  Authentication and Permission

1) Using APIView
    - manually you have to save the
    - no pre build function to perform pre or post save 

2) Using Mixins
    - some pre defind function present
    - pre_save(), perform_create() etc

3) Using Generic Views
    - support mixins property



E)  Relationship-Hyperlinked-APIs

1)  To present an HTML representation
    -   There are two styles of HTML renderer provided by REST framework, one for dealing with HTML rendered using templates, the other for dealing with pre-rendered HTML. The second renderer is the one we'd like to use for this endpoint.
    
2)  Hyperlinking our API
    -   Number of different ways that we might choose to represent a relationship:
        -   Using primary keys.
        -   Using hyperlinking between entities.
        -   Using a unique identifying slug field on the related entity.
        -   Using the default string representation of the related entity.
        -   Nesting the related entity inside the parent representation.
        -   Some other custom representation.

    -   The HyperlinkedModelSerializer has the following differences from ModelSerializer:
        -   It does not include the id field by default.
        -   It includes a url field, using HyperlinkedIdentityField.
        -   Relationships use HyperlinkedRelatedField, instead of PrimaryKeyRelatedField.


F)  ViewSets & Routers

    -   REST framework includes an abstraction for dealing with ViewSets
    -   ViewSet classes are almost the same thing as View classes, except that they provide operations such as read, or update, and not method handlers such as get or put.
    
1)  Router   
    -   Registering the viewsets with the router is similar to providing a urlpattern. We include two arguments - the URL prefix for the views, and the viewset itself.
    -   The DefaultRouter class we're using also automatically creates the API root view for us, so we can now delete the api_root method from our views module.
